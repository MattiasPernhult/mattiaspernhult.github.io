<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog</title>
    <link>https://mattiaspernhult.github.io/</link>
    <description>Recent content on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 24 Jul 2016 22:31:52 +0200</lastBuildDate>
    <atom:link href="https://mattiaspernhult.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>index</title>
      <link>https://mattiaspernhult.github.io/projects/</link>
      <pubDate>Sun, 24 Jul 2016 22:31:52 +0200</pubDate>
      
      <guid>https://mattiaspernhult.github.io/projects/</guid>
      <description>

&lt;h1 id=&#34;vscode-todo&#34;&gt;vscode-todo&lt;/h1&gt;

&lt;p&gt;When vscode still was in beta i developed an extension that lists todos in the current workspace. It has also created a little bit of an open-source community where people has contributed with code and issues.&lt;/p&gt;

&lt;p&gt;The extensions source code is on &lt;a href=&#34;https://github.com/MattiasPernhult/vscode-todo&#34;&gt;github&lt;/a&gt; and also published on &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=MattiasPernhult.vscode-todo&#34;&gt;vscode marketplace&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;friends-api&#34;&gt;friends-api&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;m a crazy fan and loves the tv-show Friends, and it&amp;rsquo;s definitely, in my opinion, one of the best shows ever. So I really thought that this show deserved an API so I scraped a lot of information from a diversity of websites and after quite some time I managed to get structured data saved in a database. And atop of the database I created this API.&lt;/p&gt;

&lt;p&gt;The API provides data about characters, episodes and seasons through different endpoints.&lt;/p&gt;

&lt;p&gt;The source code and the documentation is available on &lt;a href=&#34;https://github.com/MattiasPernhult/friends-api&#34;&gt;github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>File-watcher in Go</title>
      <link>https://mattiaspernhult.github.io/post/golang_file_watcher/</link>
      <pubDate>Sat, 23 Jul 2016 16:38:59 +0200</pubDate>
      
      <guid>https://mattiaspernhult.github.io/post/golang_file_watcher/</guid>
      <description>

&lt;p&gt;In this tutorial we will implement a file-watcher in go. The file-watcher will watch a path and when adding a file to that path it will read that file and afterwards perform some clean-up.&lt;/p&gt;

&lt;p&gt;The file that we will be using and parsing throughout this tutorial is a simple csv-file which contains information about starwars jedis and siths. To parse the csv file we will use the csv package in go which is part of the standard library.&lt;/p&gt;

&lt;h3 id=&#34;project-structure&#34;&gt;Project Structure&lt;/h3&gt;

&lt;p&gt;I chose to structure this tutorial like this and named the project file-watcher.&lt;/p&gt;

&lt;p&gt;file-watcher&lt;br&gt;
|&amp;mdash; drop&lt;br&gt;
|&amp;mdash; starwars.csv&lt;br&gt;
|&amp;mdash; main.go&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;content-of-csv-file&#34;&gt;Content of csv-file&lt;/h3&gt;

&lt;p&gt;Add the following content to the csv-file&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Obi-Wan Kenobi,light,Qui-Gon Jinn,Yoda,apprentices,Anakin Skywalker,Luke Skywalker
Dooku,dark,Yoda,Darth Sidious,apprentices,Qui-Gon Jinn,Grievous
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;go-code&#34;&gt;Go Code&lt;/h3&gt;

&lt;p&gt;Next step is to set up the basic structure for the main.go file&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main
 
import (
    &amp;quot;encoding/csv&amp;quot;
    &amp;quot;log&amp;quot;
    &amp;quot;fmt&amp;quot;
    &amp;quot;io/ioutil&amp;quot;
    &amp;quot;os&amp;quot;
    &amp;quot;strings&amp;quot;
)

type StarWars struct {
    Name        string
    Side        string
    Masters     []string
    Apprentices []string
}

const PATH = &amp;quot;./drop&amp;quot;
 
func main() {
 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;em&gt;StarWars&lt;/em&gt; struct is just a basic struct to hold information about each starwars character.&lt;/p&gt;

&lt;p&gt;The constant &lt;em&gt;PATH&lt;/em&gt; is the path that the application will be watching for any changes.&lt;/p&gt;

&lt;p&gt;You migth get some errors that you are have unused imports, but those errors will be resolved when we start to add some code.&lt;/p&gt;

&lt;p&gt;Next we need to add some code in the main function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {
    for {
        dir, err := os.Open(PATH)
        if err != nil {
        	log.Fatal(fmt.Sprintf(&amp;quot;Error when opening PATH: %s&amp;quot;, err.Error()))
      	}
      	defer dir.Close()
 
        filesInDir, _ := dir.Readdir(-1)
        for _, file := range filesInDir {
            fileData := readDataFromFile(file.Name())
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First we added a for loop that will run until you terminate the application.&lt;/p&gt;

&lt;p&gt;Inside the for loop we open the drop directory and if no error was returned we read all the files in that directory.&lt;/p&gt;

&lt;p&gt;We are passing a negative number to the &lt;em&gt;dir.Readdir&lt;/em&gt; function which means that it will read all the files, if you change this to a positive number, for example 3 the dir.Readdir would have returned at most 3 files.&lt;/p&gt;

&lt;p&gt;Then we loop through each file with the range operator, if the &lt;em&gt;dir.Readdir&lt;/em&gt; function don&amp;rsquo;t returns any files we would just start over again.&lt;/p&gt;

&lt;p&gt;But if the &lt;em&gt;dir.Readdir&lt;/em&gt; function returns files we call a function named &lt;em&gt;readDataFromFile&lt;/em&gt; and pass the name of the file and this function will return the file data as a byte slice.&lt;/p&gt;

&lt;h4 id=&#34;the-readdatafromfile-function&#34;&gt;The readDataFromFile function&lt;/h4&gt;

&lt;p&gt;Next step is to implement the readDataFromFile function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func readDataFromFile(fileName string) []byte {
    filePath := PATH + &amp;quot;/&amp;quot; + fileName
    f, err := os.Open(filePath)
    if err != nil {
        log.Fatal(fmt.Sprintf(&amp;quot;Error when opening path %s: %s&amp;quot;, filePath, err.Error()))
    }
    defer f.Close()

    fileData, _ := ioutil.ReadAll(f)
    os.Remove(filePath)
    return fileData
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here the &lt;em&gt;readDataFromFile&lt;/em&gt; receives the fileName as an argument and creates the filepath with the name. Next the function open the file with the &lt;em&gt;os.Open&lt;/em&gt; function.&lt;/p&gt;

&lt;p&gt;Next it reads the entire content of the file by using the &lt;em&gt;ReadAll&lt;/em&gt; function which is located in the &lt;em&gt;io/ioutil&lt;/em&gt; package.&lt;/p&gt;

&lt;p&gt;And finally it removes the file from the computer and returns the file data.&lt;/p&gt;

&lt;h4 id=&#34;parse-and-print-the-data&#34;&gt;Parse and print the data&lt;/h4&gt;

&lt;p&gt;Next step we will add a line of code to the main function, just beneath the call to &lt;em&gt;readDataFromFile&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {
    for {
        dir, err := os.Open(PATH)
        if err != nil {
            log.Fatal(fmt.Sprintf(&amp;quot;Error when opening PATH: %s&amp;quot;, err.Error()))
      	}
      	defer dir.Close()
 
        filesInDir, _ := dir.Readdir(-1)
        for _, file := range filesInDir {
            fileData := readDataFromFile(file.Name())

            go parseAndPrintData(string(fileData))
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we call the &lt;em&gt;parseAndPrintData&lt;/em&gt; function with a new goroutine and pass along the fileData that we received from the readDataFromFile function.&lt;/p&gt;

&lt;p&gt;Next we will implement the function that will parse the data and print it to the STDOUT.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func parseAndPrintData(fileData string) {
    reader := csv.NewReader(strings.NewReader(fileData))
    lines, _ := reader.ReadAll()
    for _, line := range lines {
        starwars := new(StarWars)
        starwars.Name = line[0]
        starwars.Side = line[1]
        for i := 2; i &amp;lt; len(line); i++ {
            if line[i] == &amp;quot;apprentices&amp;quot; {
                i++
                starwars.Apprentices = line[i:]
                break
            }
            starwars.Masters = append(starwars.Masters, line[i])
        }
 
        fmt.Printf(&amp;quot;\n%s\n%s is on the %s side of the force.\nMasters for %s was: %v.\n%s had %v as apprentices.\n&amp;quot;,
            strings.ToTitle(starwars.Name), starwars.Name, starwars.Side, starwars.Name,
            starwars.Masters, starwars.Name, starwars.Apprentices)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First we create a new csv Reader with the fileData, next we are using that reader to read the file content.&lt;/p&gt;

&lt;p&gt;Then we iterate over all the lines and for each line we create a new starwars struct that we will populate with data. The two first items of each line is the name of the character followed by which side of the force the character use.&lt;/p&gt;

&lt;p&gt;if line equals apprentices we have reached the state when the rest of the items will be apprentices so we will add all those items to the struct field Apprentices.&lt;/p&gt;

&lt;p&gt;Then we just print the result with the &lt;em&gt;fmt.Printf&lt;/em&gt; function.&lt;/p&gt;

&lt;h3 id=&#34;testing-the-application&#34;&gt;Testing the application&lt;/h3&gt;

&lt;p&gt;Open a Terminal and go to the root of the file-watcher directory and start the application with&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go run main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then open a new tab and type the following command, be sure that you are standing in the root of the directory&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp ./starwars.csv ./drop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this you should see this result in the tab with the running golang application&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;OBI-WAN KENOBI
Obi-Wan Kenobi is on the light side of the force.
Masters for Obi-Wan Kenobi was: [Qui-Gon Jinn Yoda].
Obi-Wan Kenobi had [Anakin Skywalker Luke Skywalker] as apprentices.
 
DOOKU
Dooku is on the dark side of the force.
Masters for Dooku was: [Yoda Darth Sidious].
Dooku had [Qui-Gon Jinn Grievous] as apprentices.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And there you have it, your own file-watcher with just a few lines of code.&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>https://mattiaspernhult.github.io/about/</link>
      <pubDate>Sat, 23 Jul 2016 14:01:00 +0200</pubDate>
      
      <guid>https://mattiaspernhult.github.io/about/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>